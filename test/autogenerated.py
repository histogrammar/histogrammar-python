#!/usr/bin/env python

# Copyright 2016 DIANA-HEP
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import math
import pickle
import unittest


from histogrammar import *

tolerance = 1e-12

util.relativeTolerance  = tolerance
util.absoluteTolerance  = tolerance

class Struct(object):
    def __init__(self, x, y, z, w):
        self.bool = x
        self.int = y
        self.double = z
        self.string = w
    def __repr__(self):
        return "Struct({}, {}, {}, {})".format(self.bool, self.int, self.double, repr(self.string))

def ed(x): return Factory.fromJson(x.toJson())

class TestEverything(unittest.TestCase):
    def assertAlmostEqualJSON(self, x, y):
        if isinstance(x, dict) and isinstance(y, dict):
            if set(x.keys()) == set(y.keys()):
                for k in x.keys():
                    self.assertAlmostEqualJSON(x[k], y[k])
            else:
                raise AssertionError("keys {} are not equal to keys {}".format(sorted(x.keys()), sorted(y.keys())))

        elif isinstance(x, list) and isinstance(y, list):
            if len(x) == len(y):
                for xi, yi in zip(x, y):
                    self.assertAlmostEqualJSON(xi, yi)
            else:
                raise AssertionError("length of {} is not equal to length of {}".format(x, y))

        elif isinstance(x, basestring) and isinstance(y, basestring):
            self.assertEqual(x, y)

        elif isinstance(x, (int, long, float)) and isinstance(y, (int, long, float)):
            self.assertAlmostEqual(x, y)

        else:
            self.assertEqual(x, y)

    def runTest(self):
        pass

    def test_count(self):
        x = Count()
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.4)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 1.0, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(2.2)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 2.0, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.8)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 3.0, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 4.0, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(7.3)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 5.0, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-4.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 6.0, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(1.6)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 7.0, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 8.0, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-3.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 9.0, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 10.0, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_weightedCount(self):
        x = Count()
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.14, 3.4)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 3.4, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.14, 2.2)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 5.6, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.14, -1.8)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 5.6, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.14, 0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 5.6, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.14, 7.3)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 12.899999999999999, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.14, -4.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 12.899999999999999, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.14, 1.6)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 14.499999999999998, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.14, 0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 14.499999999999998, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.14, -3.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 14.499999999999998, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.14, -1.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': 14.499999999999998, 'type': 'Count'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_summ(self):
        x = Sum(lambda x: x + 1)
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.4)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 4.4, 'entries': 1.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(2.2)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 7.6, 'entries': 2.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.8)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 6.8, 'entries': 3.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 7.8, 'entries': 4.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(7.3)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 16.1, 'entries': 5.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-4.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 12.399999999999999, 'entries': 6.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(1.6)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 15.0, 'entries': 7.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 16.0, 'entries': 8.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-3.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 14.0, 'entries': 9.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 13.3, 'entries': 10.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_sumWithName(self):
        x = Sum(named('something', lambda x: x + 1))
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.4)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 4.4, 'name': 'something', 'entries': 1.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(2.2)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 7.6, 'name': 'something', 'entries': 2.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.8)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 6.8, 'name': 'something', 'entries': 3.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 7.8, 'name': 'something', 'entries': 4.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(7.3)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 16.1, 'name': 'something', 'entries': 5.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-4.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 12.399999999999999, 'name': 'something', 'entries': 6.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(1.6)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 15.0, 'name': 'something', 'entries': 7.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 16.0, 'name': 'something', 'entries': 8.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-3.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 14.0, 'name': 'something', 'entries': 9.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 13.3, 'name': 'something', 'entries': 10.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_sumString(self):
        x = Sum('x + 1')
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.4)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 4.4, 'name': 'x + 1', 'entries': 1.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(2.2)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 7.6, 'name': 'x + 1', 'entries': 2.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.8)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 6.8, 'name': 'x + 1', 'entries': 3.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 7.8, 'name': 'x + 1', 'entries': 4.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(7.3)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 16.1, 'name': 'x + 1', 'entries': 5.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-4.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 12.399999999999999, 'name': 'x + 1', 'entries': 6.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(1.6)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 15.0, 'name': 'x + 1', 'entries': 7.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 16.0, 'name': 'x + 1', 'entries': 8.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-3.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 14.0, 'name': 'x + 1', 'entries': 9.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 13.3, 'name': 'x + 1', 'entries': 10.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_sumStruct(self):
        x = Sum(lambda x: x.double + 1)
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, -2, 3.4, 'one'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 4.4, 'entries': 1.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, -1, 2.2, 'two'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 7.6, 'entries': 2.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 0, -1.8, 'three'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 6.8, 'entries': 3.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 1, 0.0, 'four'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 7.8, 'entries': 4.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 2, 7.3, 'five'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 16.1, 'entries': 5.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 3, -4.7, 'six'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 12.399999999999999, 'entries': 6.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 4, 1.6, 'seven'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 15.0, 'entries': 7.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 5, 0.0, 'eight'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 16.0, 'entries': 8.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 6, -3.0, 'nine'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 14.0, 'entries': 9.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 7, -1.7, 'ten'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 13.3, 'entries': 10.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_sumStructString(self):
        x = Sum('double + 1')
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, -2, 3.4, 'one'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 4.4, 'name': 'double + 1', 'entries': 1.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, -1, 2.2, 'two'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 7.6, 'name': 'double + 1', 'entries': 2.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 0, -1.8, 'three'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 6.8, 'name': 'double + 1', 'entries': 3.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 1, 0.0, 'four'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 7.8, 'name': 'double + 1', 'entries': 4.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 2, 7.3, 'five'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 16.1, 'name': 'double + 1', 'entries': 5.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 3, -4.7, 'six'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 12.399999999999999, 'name': 'double + 1', 'entries': 6.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 4, 1.6, 'seven'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 15.0, 'name': 'double + 1', 'entries': 7.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 5, 0.0, 'eight'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 16.0, 'name': 'double + 1', 'entries': 8.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 6, -3.0, 'nine'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 14.0, 'name': 'double + 1', 'entries': 9.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 7, -1.7, 'ten'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'sum': 13.3, 'name': 'double + 1', 'entries': 10.0}, 'type': 'Sum'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_average(self):
        x = Average(lambda x: x)
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.4)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 3.4, 'entries': 1}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(2.2)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 2.8, 'entries': 2}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.8)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 1.2666666666666666, 'entries': 3}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 0.95, 'entries': 4}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(7.3)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 2.2199999999999998, 'entries': 5}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-4.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 1.0666666666666667, 'entries': 6}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(1.6)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 1.1428571428571428, 'entries': 7}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 1.0, 'entries': 8}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-3.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 0.5555555555555556, 'entries': 9}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 0.32999999999999996, 'entries': 10}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_averageWithName(self):
        x = Average(named('something', lambda x: x))
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.4)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 3.4, 'name': 'something', 'entries': 1}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(2.2)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 2.8, 'name': 'something', 'entries': 2}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.8)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 1.2666666666666666, 'name': 'something', 'entries': 3}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 0.95, 'name': 'something', 'entries': 4}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(7.3)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 2.2199999999999998, 'name': 'something', 'entries': 5}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-4.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 1.0666666666666667, 'name': 'something', 'entries': 6}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(1.6)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 1.1428571428571428, 'name': 'something', 'entries': 7}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 1.0, 'name': 'something', 'entries': 8}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-3.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 0.5555555555555556, 'name': 'something', 'entries': 9}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'mean': 0.32999999999999996, 'name': 'something', 'entries': 10}, 'type': 'Average'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_averageWithFilter(self):
        x = Select(lambda x: x.bool, Average(lambda x: x.double))
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, -2, 3.4, 'one'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 1, 'mean': 3.4}, 'type': 'Average', 'entries': 1}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, -1, 2.2, 'two'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 1, 'mean': 3.4}, 'type': 'Average', 'entries': 2}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 0, -1.8, 'three'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 2, 'mean': 0.7999999999999999}, 'type': 'Average', 'entries': 3}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 1, 0.0, 'four'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 2, 'mean': 0.7999999999999999}, 'type': 'Average', 'entries': 4}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 2, 7.3, 'five'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 2, 'mean': 0.7999999999999999}, 'type': 'Average', 'entries': 5}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 3, -4.7, 'six'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 2, 'mean': 0.7999999999999999}, 'type': 'Average', 'entries': 6}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 4, 1.6, 'seven'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 3, 'mean': 1.0666666666666667}, 'type': 'Average', 'entries': 7}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 5, 0.0, 'eight'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 4, 'mean': 0.8}, 'type': 'Average', 'entries': 8}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 6, -3.0, 'nine'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 4, 'mean': 0.8}, 'type': 'Average', 'entries': 9}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 7, -1.7, 'ten'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 5, 'mean': 0.30000000000000004}, 'type': 'Average', 'entries': 10}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_averageWeighted(self):
        x = Select(lambda x: x.int, Average(lambda x: x.double))
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, -2, 3.4, 'one'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 0.0, 'mean': 0.0}, 'type': 'Average', 'entries': 1}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, -1, 2.2, 'two'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 0.0, 'mean': 0.0}, 'type': 'Average', 'entries': 2}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 0, -1.8, 'three'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 0.0, 'mean': 0.0}, 'type': 'Average', 'entries': 3}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 1, 0.0, 'four'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 1, 'mean': 0.0}, 'type': 'Average', 'entries': 4}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 2, 7.3, 'five'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 3, 'mean': 4.866666666666666}, 'type': 'Average', 'entries': 5}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 3, -4.7, 'six'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 6, 'mean': 0.08333333333333304}, 'type': 'Average', 'entries': 6}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 4, 1.6, 'seven'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 10, 'mean': 0.6899999999999998}, 'type': 'Average', 'entries': 7}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 5, 0.0, 'eight'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 15, 'mean': 0.4599999999999999}, 'type': 'Average', 'entries': 8}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 6, -3.0, 'nine'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 21, 'mean': -0.5285714285714287}, 'type': 'Average', 'entries': 9}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 7, -1.7, 'ten'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'entries': 28, 'mean': -0.8214285714285714}, 'type': 'Average', 'entries': 10}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_deviate(self):
        x = Deviate(lambda x: x)
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.4)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 0.0, 'mean': 3.4, 'entries': 1}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(2.2)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 0.3600000000000003, 'mean': 2.8, 'entries': 2}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.8)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 4.942222222222222, 'mean': 1.2666666666666666, 'entries': 3}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 4.0075, 'mean': 0.95, 'entries': 4}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(7.3)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 9.657600000000002, 'mean': 2.2199999999999998, 'entries': 5}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-4.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 14.69888888888889, 'mean': 1.0666666666666667, 'entries': 6}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(1.6)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 12.63387755102041, 'mean': 1.1428571428571428, 'entries': 7}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 11.197500000000002, 'mean': 1.0, 'entries': 8}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-3.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 11.533580246913582, 'mean': 0.5555555555555556, 'entries': 9}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 10.8381, 'mean': 0.32999999999999996, 'entries': 10}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_deviateStruct(self):
        x = Deviate(lambda x: x.double)
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, -2, 3.4, 'one'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 0.0, 'mean': 3.4, 'entries': 1}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, -1, 2.2, 'two'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 0.3600000000000003, 'mean': 2.8, 'entries': 2}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 0, -1.8, 'three'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 4.942222222222222, 'mean': 1.2666666666666666, 'entries': 3}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 1, 0.0, 'four'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 4.0075, 'mean': 0.95, 'entries': 4}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 2, 7.3, 'five'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 9.657600000000002, 'mean': 2.2199999999999998, 'entries': 5}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 3, -4.7, 'six'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 14.69888888888889, 'mean': 1.0666666666666667, 'entries': 6}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 4, 1.6, 'seven'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 12.63387755102041, 'mean': 1.1428571428571428, 'entries': 7}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 5, 0.0, 'eight'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 11.197500000000002, 'mean': 1.0, 'entries': 8}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 6, -3.0, 'nine'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 11.533580246913582, 'mean': 0.5555555555555556, 'entries': 9}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 7, -1.7, 'ten'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'variance': 10.8381, 'mean': 0.32999999999999996, 'entries': 10}, 'type': 'Deviate'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_deviateWeighted(self):
        x = Select(lambda x: x.int, Deviate(lambda x: x.double))
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, -2, 3.4, 'one'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'variance': 0.0, 'mean': 0.0, 'entries': 0.0}, 'type': 'Deviate', 'entries': 1}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, -1, 2.2, 'two'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'variance': 0.0, 'mean': 0.0, 'entries': 0.0}, 'type': 'Deviate', 'entries': 2}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 0, -1.8, 'three'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'variance': 0.0, 'mean': 0.0, 'entries': 0.0}, 'type': 'Deviate', 'entries': 3}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 1, 0.0, 'four'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'variance': 0.0, 'mean': 0.0, 'entries': 1}, 'type': 'Deviate', 'entries': 4}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 2, 7.3, 'five'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'variance': 11.842222222222222, 'mean': 4.866666666666666, 'entries': 3}, 'type': 'Deviate', 'entries': 5}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 3, -4.7, 'six'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'variance': 28.801388888888894, 'mean': 0.08333333333333304, 'entries': 6}, 'type': 'Deviate', 'entries': 6}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 4, 1.6, 'seven'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'variance': 17.832900000000006, 'mean': 0.6899999999999998, 'entries': 10}, 'type': 'Deviate', 'entries': 7}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 5, 0.0, 'eight'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'variance': 11.9944, 'mean': 0.4599999999999999, 'entries': 15}, 'type': 'Deviate', 'entries': 8}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 6, -3.0, 'nine'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'variance': 11.01061224489796, 'mean': -0.5285714285714287, 'entries': 21}, 'type': 'Deviate', 'entries': 9}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 7, -1.7, 'ten'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'data': {'variance': 8.515255102040818, 'mean': -0.8214285714285714, 'entries': 28}, 'type': 'Deviate', 'entries': 10}, 'type': 'Select'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_minimize(self):
        x = Minimize(named('something', lambda x: x))
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.4)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': 3.4, 'name': 'something', 'entries': 1}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(2.2)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': 2.2, 'name': 'something', 'entries': 2}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.8)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': -1.8, 'name': 'something', 'entries': 3}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': -1.8, 'name': 'something', 'entries': 4}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(7.3)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': -1.8, 'name': 'something', 'entries': 5}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-4.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': -4.7, 'name': 'something', 'entries': 6}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(1.6)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': -4.7, 'name': 'something', 'entries': 7}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': -4.7, 'name': 'something', 'entries': 8}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-3.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': -4.7, 'name': 'something', 'entries': 9}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': -4.7, 'name': 'something', 'entries': 10}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_minimizeStruct(self):
        x = Minimize(named('something', lambda x: x.double))
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, -2, 3.4, 'one'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': 3.4, 'name': 'something', 'entries': 1}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, -1, 2.2, 'two'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': 2.2, 'name': 'something', 'entries': 2}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 0, -1.8, 'three'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': -1.8, 'name': 'something', 'entries': 3}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 1, 0.0, 'four'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': -1.8, 'name': 'something', 'entries': 4}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 2, 7.3, 'five'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': -1.8, 'name': 'something', 'entries': 5}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 3, -4.7, 'six'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': -4.7, 'name': 'something', 'entries': 6}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 4, 1.6, 'seven'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': -4.7, 'name': 'something', 'entries': 7}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 5, 0.0, 'eight'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': -4.7, 'name': 'something', 'entries': 8}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 6, -3.0, 'nine'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': -4.7, 'name': 'something', 'entries': 9}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 7, -1.7, 'ten'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'min': -4.7, 'name': 'something', 'entries': 10}, 'type': 'Minimize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_maximize(self):
        x = Maximize(named('something', lambda x: x))
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.4)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 3.4, 'name': 'something', 'entries': 1}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(2.2)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 3.4, 'name': 'something', 'entries': 2}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.8)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 3.4, 'name': 'something', 'entries': 3}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 3.4, 'name': 'something', 'entries': 4}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(7.3)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 7.3, 'name': 'something', 'entries': 5}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-4.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 7.3, 'name': 'something', 'entries': 6}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(1.6)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 7.3, 'name': 'something', 'entries': 7}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 7.3, 'name': 'something', 'entries': 8}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-3.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 7.3, 'name': 'something', 'entries': 9}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 7.3, 'name': 'something', 'entries': 10}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_maximizeStruct(self):
        x = Maximize(named('something', lambda x: x.double))
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, -2, 3.4, 'one'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 3.4, 'name': 'something', 'entries': 1}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, -1, 2.2, 'two'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 3.4, 'name': 'something', 'entries': 2}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 0, -1.8, 'three'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 3.4, 'name': 'something', 'entries': 3}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 1, 0.0, 'four'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 3.4, 'name': 'something', 'entries': 4}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 2, 7.3, 'five'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 7.3, 'name': 'something', 'entries': 5}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 3, -4.7, 'six'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 7.3, 'name': 'something', 'entries': 6}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 4, 1.6, 'seven'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 7.3, 'name': 'something', 'entries': 7}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 5, 0.0, 'eight'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 7.3, 'name': 'something', 'entries': 8}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 6, -3.0, 'nine'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 7.3, 'name': 'something', 'entries': 9}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 7, -1.7, 'ten'))
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'max': 7.3, 'name': 'something', 'entries': 10}, 'type': 'Maximize'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_bag(self):
        x = Bag(named('something', lambda x: x), 'N')
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(3.4)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'range': 'N', 'values': [{'w': 1, 'v': 3.4}], 'name': 'something', 'entries': 1}, 'type': 'Bag'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(2.2)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'range': 'N', 'values': [{'w': 1, 'v': 2.2}, {'w': 1, 'v': 3.4}], 'name': 'something', 'entries': 2}, 'type': 'Bag'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.8)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'range': 'N', 'values': [{'w': 1, 'v': -1.8}, {'w': 1, 'v': 2.2}, {'w': 1, 'v': 3.4}], 'name': 'something', 'entries': 3}, 'type': 'Bag'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'range': 'N', 'values': [{'w': 1, 'v': -1.8}, {'w': 1, 'v': 0.0}, {'w': 1, 'v': 2.2}, {'w': 1, 'v': 3.4}], 'name': 'something', 'entries': 4}, 'type': 'Bag'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(7.3)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'range': 'N', 'values': [{'w': 1, 'v': -1.8}, {'w': 1, 'v': 0.0}, {'w': 1, 'v': 2.2}, {'w': 1, 'v': 3.4}, {'w': 1, 'v': 7.3}], 'name': 'something', 'entries': 5}, 'type': 'Bag'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-4.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'range': 'N', 'values': [{'w': 1, 'v': -4.7}, {'w': 1, 'v': -1.8}, {'w': 1, 'v': 0.0}, {'w': 1, 'v': 2.2}, {'w': 1, 'v': 3.4}, {'w': 1, 'v': 7.3}], 'name': 'something', 'entries': 6}, 'type': 'Bag'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(1.6)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'range': 'N', 'values': [{'w': 1, 'v': -4.7}, {'w': 1, 'v': -1.8}, {'w': 1, 'v': 0.0}, {'w': 1, 'v': 1.6}, {'w': 1, 'v': 2.2}, {'w': 1, 'v': 3.4}, {'w': 1, 'v': 7.3}], 'name': 'something', 'entries': 7}, 'type': 'Bag'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(0.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'range': 'N', 'values': [{'w': 1, 'v': -4.7}, {'w': 1, 'v': -1.8}, {'w': 2, 'v': 0.0}, {'w': 1, 'v': 1.6}, {'w': 1, 'v': 2.2}, {'w': 1, 'v': 3.4}, {'w': 1, 'v': 7.3}], 'name': 'something', 'entries': 8}, 'type': 'Bag'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-3.0)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'range': 'N', 'values': [{'w': 1, 'v': -4.7}, {'w': 1, 'v': -3.0}, {'w': 1, 'v': -1.8}, {'w': 2, 'v': 0.0}, {'w': 1, 'v': 1.6}, {'w': 1, 'v': 2.2}, {'w': 1, 'v': 3.4}, {'w': 1, 'v': 7.3}], 'name': 'something', 'entries': 9}, 'type': 'Bag'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(-1.7)
        self.assertAlmostEqualJSON(x.toJson(), {'data': {'range': 'N', 'values': [{'w': 1, 'v': -4.7}, {'w': 1, 'v': -3.0}, {'w': 1, 'v': -1.8}, {'w': 1, 'v': -1.7}, {'w': 2, 'v': 0.0}, {'w': 1, 'v': 1.6}, {'w': 1, 'v': 2.2}, {'w': 1, 'v': 3.4}, {'w': 1, 'v': 7.3}], 'name': 'something', 'entries': 10}, 'type': 'Bag'})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))

    def test_bagLimit(self):
        x = Limit(5, Bag(lambda x: x.string, 'S'))
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, -2, 3.4, 'one'))
        self.assertAlmostEqualJSON(x.toJson(), {'type': 'Limit', 'data': {'limit': 5, 'type': 'Bag', 'data': {'range': 'S', 'values': [{'w': 1, 'v': 'one'}], 'entries': 1}, 'entries': 1}})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, -1, 2.2, 'two'))
        self.assertAlmostEqualJSON(x.toJson(), {'type': 'Limit', 'data': {'limit': 5, 'type': 'Bag', 'data': {'range': 'S', 'values': [{'w': 1, 'v': 'one'}, {'w': 1, 'v': 'two'}], 'entries': 2}, 'entries': 2}})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 0, -1.8, 'three'))
        self.assertAlmostEqualJSON(x.toJson(), {'type': 'Limit', 'data': {'limit': 5, 'type': 'Bag', 'data': {'range': 'S', 'values': [{'w': 1, 'v': 'one'}, {'w': 1, 'v': 'three'}, {'w': 1, 'v': 'two'}], 'entries': 3}, 'entries': 3}})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 1, 0.0, 'four'))
        self.assertAlmostEqualJSON(x.toJson(), {'type': 'Limit', 'data': {'limit': 5, 'type': 'Bag', 'data': {'range': 'S', 'values': [{'w': 1, 'v': 'four'}, {'w': 1, 'v': 'one'}, {'w': 1, 'v': 'three'}, {'w': 1, 'v': 'two'}], 'entries': 4}, 'entries': 4}})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 2, 7.3, 'five'))
        self.assertAlmostEqualJSON(x.toJson(), {'type': 'Limit', 'data': {'limit': 5, 'type': 'Bag', 'data': {'range': 'S', 'values': [{'w': 1, 'v': 'five'}, {'w': 1, 'v': 'four'}, {'w': 1, 'v': 'one'}, {'w': 1, 'v': 'three'}, {'w': 1, 'v': 'two'}], 'entries': 5}, 'entries': 5}})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 3, -4.7, 'six'))
        self.assertAlmostEqualJSON(x.toJson(), {'type': 'Limit', 'data': {'limit': 5, 'type': 'Bag', 'data': None, 'entries': 6}})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 4, 1.6, 'seven'))
        self.assertAlmostEqualJSON(x.toJson(), {'type': 'Limit', 'data': {'limit': 5, 'type': 'Bag', 'data': None, 'entries': 7}})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 5, 0.0, 'eight'))
        self.assertAlmostEqualJSON(x.toJson(), {'type': 'Limit', 'data': {'limit': 5, 'type': 'Bag', 'data': None, 'entries': 8}})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(False, 6, -3.0, 'nine'))
        self.assertAlmostEqualJSON(x.toJson(), {'type': 'Limit', 'data': {'limit': 5, 'type': 'Bag', 'data': None, 'entries': 9}})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
        x.fill(Struct(True, 7, -1.7, 'ten'))
        self.assertAlmostEqualJSON(x.toJson(), {'type': 'Limit', 'data': {'limit': 5, 'type': 'Bag', 'data': None, 'entries': 10}})
        self.assertEqual(x, x)
        self.assertEqual(ed(x), ed(x))
        self.assertEqual(hash(x), hash(x))
        self.assertEqual(hash(ed(x)), hash(ed(x)))
        self.assertEqual(x, x + x.zero())
        self.assertEqual(ed(x), ed(x) + ed(x).zero())
        self.assertEqual(ed(x + x), ed(x) + ed(x))
        self.assertEqual(x, pickle.loads(pickle.dumps(x)))
        self.assertEqual(ed(x), pickle.loads(pickle.dumps(ed(x))))
        self.assertEqual(ed(x), ed(pickle.loads(pickle.dumps(x))))
